<?php
declare(strict_types=1);

use App\Api\Services\StockService;
use PHPUnit\Framework\TestCase;

class StockServiceTest extends TestCase
{
    private readonly StockService $stockService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $entityManagerStub = $this->createStub(\Doctrine\ORM\EntityManager::class);
        $entityRepositoryStub = $this->createStub(\Doctrine\ORM\EntityRepository::class);

        $clientMock = $this->createMock(GuzzleHttp\Client::class);
        $clientMock->method('get')
            ->willReturn(new \GuzzleHttp\Psr7\Response(202, ['Content-Length' => 0]));

        $stock = new \App\Models\Stock();
        $stock->setId(1);
        $stock->setName('KGHM');
        $stock->setSymbol('KGH');
        $stock->setClose(124);
        $stock->setLow(123.65);
        $stock->setHigh(127.85);
        $stock->setOpen(127.85);
        $stock->setDate('2023-02-27', '10:00:00');

        $entityRepositoryStub->method('findAll')
                            ->willReturn([$stock]);

        $entityManagerStub->method('getRepository')
                            ->willReturn($entityRepositoryStub);

        $this->stockService = new StockService($entityManagerStub, $clientMock);
    }

    public function testHistories(): void
    {
        $histories = $this->stockService->histories();

        $this->assertTrue(sizeof($histories) > 0);
    }

    public function testNewStockModel(): void
    {
        $stock = $this->stockService->getNewStockModel(
            [
                'name' => 'KGHM',
                'symbol' => 'KGH',
                'close' => 124,
                'low' => 123.65,
                'high' => 127.85,
                'open' => 127.85,
                'date' => '2023-02-27',
                'time' => '12:00:00'
            ]
        );

        $this->assertInstanceOf(\App\Models\Stock::class, $stock);
    }

    public function testIsValid(): void
    {
        $isValid = $this->stockService->isValid([
            'name' => 'N/D',
            'symbol' => 'N/D',
            'close' => 'N/D',
            'low' => 'N/D',
            'high' => 'N/D',
            'open' => 'N/D',
            'date' => 'N/D',
            'time' => 'N/D'
        ]);

        $this->assertFalse($isValid);
    }

    public function testFetchCSV(): void
    {
        $this->assertNull($this->stockService->fetchCSV('csv'));
    }
}